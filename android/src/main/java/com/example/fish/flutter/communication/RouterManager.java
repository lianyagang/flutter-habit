// Autogenerated from Pigeon (v0.1.17), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.flutter.communication;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.StandardMessageCodec;
import java.util.ArrayList;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings("unused")
public class RouterManager {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class FlutterRouterParam {
    private String path;
    public String getPath() { return path; }
    public void setPath(String setterArg) { this.path = setterArg; }

    private HashMap params;
    public HashMap getParams() { return params; }
    public void setParams(HashMap setterArg) { this.params = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("path", path);
      toMapResult.put("params", params);
      return toMapResult;
    }
    static FlutterRouterParam fromMap(HashMap map) {
      FlutterRouterParam fromMapResult = new FlutterRouterParam();
      Object path = map.get("path");
      fromMapResult.path = (String)path;
      Object params = map.get("params");
      fromMapResult.params = (HashMap)params;
      return fromMapResult;
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface FlutterRouterManager {
    void notifyNavigatorPath(FlutterRouterParam arg);

    /** Sets up an instance of `FlutterRouterManager` to handle messages through the `binaryMessenger` */
    static void setup(BinaryMessenger binaryMessenger, FlutterRouterManager api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterRouterManager.notifyNavigatorPath", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              FlutterRouterParam input = FlutterRouterParam.fromMap((HashMap)message);
              api.notifyNavigatorPath(input);
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static HashMap wrapError(Exception exception) {
    HashMap<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
