// Autogenerated from Pigeon (v0.1.17), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "RouterManager.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary* wrapResult(NSDictionary *result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = [NSDictionary dictionaryWithObjectsAndKeys:
        (error.code ? error.code : [NSNull null]), @"code",
        (error.message ? error.message : [NSNull null]), @"message",
        (error.details ? error.details : [NSNull null]), @"details",
        nil];
  }
  return [NSDictionary dictionaryWithObjectsAndKeys:
      (result ? result : [NSNull null]), @"result",
      errorDict, @"error",
      nil];
}

@interface VVFlutterRouterParam ()
+(VVFlutterRouterParam*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end

@implementation VVFlutterRouterParam
+(VVFlutterRouterParam*)fromMap:(NSDictionary*)dict {
  VVFlutterRouterParam* result = [[VVFlutterRouterParam alloc] init];
  result.path = dict[@"path"];
  if ((NSNull *)result.path == [NSNull null]) {
    result.path = nil;
  }
  result.params = dict[@"params"];
  if ((NSNull *)result.params == [NSNull null]) {
    result.params = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.path ? self.path : [NSNull null]), @"path", (self.params ? self.params : [NSNull null]), @"params", nil];
}
@end

void VVFlutterRouterManagerSetup(id<FlutterBinaryMessenger> binaryMessenger, id<VVFlutterRouterManager> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.FlutterRouterManager.notifyNavigatorPath"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        VVFlutterRouterParam *input = [VVFlutterRouterParam fromMap:message];
        [api notifyNavigatorPath:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
